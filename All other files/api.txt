// <copyright file="Program.cs" company="ThingTrax UK Ltd">
// Copyright (c) ThingTrax Ltd. All rights reserved.
// </copyright>

#pragma warning disable SA1200 // Using directives should be placed correctly
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpOverrides;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Authorization;
using Microsoft.AspNetCore.Rewrite;
using Microsoft.AspNetCore.Server.Kestrel.Https;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Caching.StackExchangeRedis;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Microsoft.OpenApi.Models;
using MongoDB.Driver;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Serilog;
using StackExchange.Redis;
using System;
using System.Globalization;
using System.Net;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Threading.Tasks;
using TT.Core.Api;
using TT.Core.Api.AdSecurity;
using TT.Core.Api.AwsSecretsManager;
using TT.Core.Api.SecurityModels;
using TT.Core.Models.Configurations;
using TT.Core.Models.Constants;
using TT.Core.Models.Enums;
using TT.Core.Repository;
using TT.Core.Repository.Mongo;
using TT.Core.Repository.Mongo.Interfaces;
using TT.Core.Repository.Mongo.MongoModel;
using TT.Core.Repository.Sql;
using TT.Core.Services;
using TT.Core.Services.Hubs;

#pragma warning restore SA1200 // Using directives should be placed correctly

var environmentName = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");
Console.WriteLine(environmentName);

var webApplicationOptions = new WebApplicationOptions
{
    EnvironmentName = environmentName,
    Args = args,
};

var builder = WebApplication.CreateBuilder(webApplicationOptions);
var configuration = builder.Configuration;
if (!string.Equals(environmentName, "development", StringComparison.InvariantCultureIgnoreCase))
{
    builder.Host.ConfigureAppConfiguration((_, configurationBuilder) =>
    {
        configurationBuilder.AddAmazonSecretsManager(
            configuration["awsSeceret:region"], configuration["awsSeceret:secretId"], configuration["awsSeceret:versionStage"],
            configuration["awsSeceret:accessKey"], configuration["awsSeceret:secretKey"]);
    });
}

builder.WebHost.ConfigureKestrel(serverOptions =>
{
    serverOptions.Listen(new IPEndPoint(IPAddress.Any, 443), listenOptions =>
    {
        var certPassword = Environment.GetEnvironmentVariable("KestrelPassword");
        var certPath = Environment.GetEnvironmentVariable("KestrelPath");
        Console.WriteLine(certPassword);
        Console.WriteLine(certPath);
        var certificate = new X509Certificate2(certPath, certPassword);
        Console.WriteLine("Certificate provided");
        var httpsConnectionAdapterOptions = new HttpsConnectionAdapterOptions()
        {
            ClientCertificateMode = ClientCertificateMode.NoCertificate,
            SslProtocols = System.Security.Authentication.SslProtocols.Tls12,
            ServerCertificate = certificate,
        };
        listenOptions.UseHttps(httpsConnectionAdapterOptions);
        listenOptions.UseConnectionLogging();
    });
});

ProjectTypes coreApi = ProjectTypes.Api;
ApplicationLogger.ConfigureLogger(configuration, environmentName, coreApi);

#region Configureservices

var services = builder.Services;
services.AddMemoryCache();

services.AddLogging(builder => { builder.AddSerilog(); });

var clientList = configuration.GetSection("webClient").Get<string[]>();

services.AddCors(options =>
{
    options.AddPolicy(
        "CorsPolicy",
        builder => builder
        .WithOrigins(clientList)
        .AllowAnyMethod()
        .AllowAnyHeader()
        .AllowCredentials());
});

// Register the Swagger generator, defining one or more Swagger documents
services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v2", new OpenApiInfo
    {
        Version = "v2",
        Title = "ThingTrax Api",
        Description = "ThingTrax was founded in 2015 to help manufacturers transform the way their labour, processes and machinery connect.",
        Contact = new OpenApiContact
        {
            Name = "ThingTrax",
            Email = "info@thingtrax.com",
        },
    });
});

services.AddAuthentication(sharedOptions =>
{
    sharedOptions.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    sharedOptions.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddAzureAd(adOptions => configuration.Bind("AzureAd", adOptions))
.AddCookie(cookieOptions => cookieOptions.SlidingExpiration = true);

// Register SQL context
services.AddDbContext<CoreContext>(
                                    opt => opt.UseSqlServer(configuration["sqlConnectionString"], o => o.CommandTimeout(180))
                                              .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking), ServiceLifetime.Transient);

services.AddDbContext<TT.Core.Repository.TelemetryContext>(
                                        opt => opt.UseSqlServer(configuration["telemetryConnectionString"], o => o.CommandTimeout(180))
                                                  .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking), ServiceLifetime.Transient);

services.AddAuthorization(option =>
{
    option.AddPolicy("GlobalAdmin", policy =>
        policy.RequireAssertion(context =>
            context.User.HasClaim("Level", RolesConstant.Admin) ||
            context.User.HasClaim("Level", RolesConstant.GlobalAdmin)));
    option.AddPolicy(RolesConstant.Admin, policy => policy.RequireClaim("Level", RolesConstant.Admin));
    option.AddPolicy(RolesConstant.Supervisor, policy => policy.RequireClaim("Level", RolesConstant.Admin, RolesConstant.Supervisor));
    option.AddPolicy(RolesConstant.Setter, policy => policy.RequireClaim("Level", RolesConstant.Admin, RolesConstant.Supervisor, RolesConstant.Setter));
    option.AddPolicy("CustomAuthorization", policy => policy.Requirements.Add(new CustomAuthorizeRequirement()));
});

// Add session services.
services.AddTransient<IAuthorizationHandler, CustomAuthorizeHandler>();
bool isAnonymousUser = Convert.ToBoolean(configuration.GetSection("anonymousUser").Value);

services.AddSignalR(hubOptions =>
{
    hubOptions.EnableDetailedErrors = true;
}).AddNewtonsoftJsonProtocol(options =>
{
    options.PayloadSerializerSettings = new JsonSerializerSettings
    {
        DateFormatString = "yyyy-MM-dd HH:mm:ss.fffZ",
        ContractResolver = new CamelCasePropertyNamesContractResolver(),
        ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
    };
});

services.AddControllers(config =>
{
    var policy = new AuthorizationPolicyBuilder()
        .RequireAuthenticatedUser()
        .Build();
    if (!isAnonymousUser)
    {
        config.Filters.Add(new AuthorizeFilter(policy));
        config.Filters.Add(new RequireHttpsAttribute());
    }

}).AddNewtonsoftJson(opt =>
{
    opt.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;
    opt.SerializerSettings.DateFormatString = "yyyy-MM-dd HH:mm:ss.fffZ";
});

// App Insight
services.AddApplicationInsightsTelemetry();

// Configurations
services.AddOptions();

var clientVersion = configuration.GetSection("ClientVersion").Value;
if (string.IsNullOrEmpty(clientVersion))
{
    // Local dev machine will have a new version everytime.
    clientVersion = DateTime.UtcNow.ToString("yyyyMMdd.hhmm", CultureInfo.CurrentCulture);
}

var redisConnectionString = configuration.GetValue<string>("redisURL");
services.Configure<MongoDatabaseSetting>(configuration.GetSection(nameof(MongoDatabaseSetting)));
services.AddSingleton<IMongoDatabaseSetting>(md => md.GetRequiredService<IOptions<MongoDatabaseSetting>>().Value);
services.AddSingleton<IMongoClient>(m => new MongoClient(configuration.GetValue<string>("MongoDatabaseSetting:ConnectionString")));
services.AddSingleton<IConnectionMultiplexer>(ConnectionMultiplexer.Connect($"{redisConnectionString},abortConnect=False,allowAdmin=true"));
services.AddOptions<RedisCacheOptions>().Configure<IServiceProvider>((options, serviceProvider) =>
{
    options.ConnectionMultiplexerFactory = () => Task.FromResult(serviceProvider.GetService<IConnectionMultiplexer>());
});
services.AddStackExchangeRedisCache(_ => { });

services.Configure<ApplicationSettings>(configuration.GetSection("ApplicationSettings"));
services.Configure<HealthCheckSettings>(configuration.GetSection("HealthCheckSettings"));
services.Configure<TokenConfig>(configuration.GetSection("AzureAd"));
services.Configure<EmailSettings>(configuration.GetSection("EmailSettings"));
services.Configure<EnergySettings>(configuration.GetSection("EnergySettings"));
services.Configure<JobSettings>(configuration.GetSection("JobSettings"));
services.Configure<RecognitionSettings>(configuration.GetSection("RecognitionSettings"));
services.Configure<PowerBISettings>(configuration.GetSection("PowerBISettings"));
services.Configure<AzureEmailSenderOptions>(configuration.GetSection("AzureEmailSenderOptions"));
services.AddSingleton(provider => configuration);
services.AddHealthChecks();
bool.TryParse(configuration.GetSection("emailErrors").Value, out bool emailFlag);

// Register dependencies
services.AddHttpContextAccessor();
services.RegisterDependencyForServices();
services.RegisterDependencyForRepository();
services.RegisterDependencyForMongoRepository();
services.RegisterDependencyForStoreProcedure();
services.AddScoped<IClaimsTransformation, ClaimsTransformation>();
#endregion

#region Configure

var app = builder.Build();
var lifetime = app.Lifetime;
var loggerFactory = app.Services.GetRequiredService<ILoggerFactory>();
lifetime.ApplicationStopping.Register(() =>
{
    string stack = $"api container {Environment.StackTrace}";
    Console.WriteLine(stack);
    Log.Logger.Information(stack);
    Thread.Sleep(200);
});

if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}

loggerFactory.AddSerilog();
app.UseHsts();
app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseCors("CorsPolicy");
app.UseMiddleware<GlobalExceptionLogger>();
app.UseMiddleware<LoggingMiddleware>();
app.UseRouting();
app.UseAuthentication();
app.UseAuthorization();

//// Enable middleware to serve generated Swagger as a JSON endpoint.
app.UseSwagger();

//// Enable middleware to serve swagger - ui(HTML, JS, CSS etc.), specifying the Swagger JSON endpoint.
app.UseSwaggerUI(c =>
{
    c.SwaggerEndpoint("/swagger/v2/swagger.json", "ThingTrax Api V1");
});

var rewriteOptions = new RewriteOptions().AddRedirectToHttps();
app.UseRewriter(rewriteOptions);

app.UseForwardedHeaders(new ForwardedHeadersOptions
{
    ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto,
    RequireHeaderSymmetry = true,
});
app.UseWebSockets();

using (var serviceScope = app.Services.CreateScope())
{
    var context = serviceScope.ServiceProvider.GetService<CoreContext>();
    var telemeryContext = serviceScope.ServiceProvider.GetService<TT.Core.Repository.TelemetryContext>();
    Console.WriteLine("Database Started");
    if (!context.AllMigrationsApplied())
    {
        Console.WriteLine("Database Context");
        context.Database.Migrate();
    }

    if (!telemeryContext.AllMigrationsApplied())
    {
        Console.WriteLine("Database tele");
        telemeryContext.Database.Migrate();
    }

    context.EnsureSeeded();

    Console.WriteLine("Database Created");
}

app.UseEndpoints(routes =>
{
    routes.MapControllers();
    routes.MapHealthChecks("/healthy");
    routes.MapHub<NotificationHub>("/hub/notification");
    routes.MapHub<AuxiliaryDashboardHub>("/hub/auxiliarydashboard");
    routes.MapHub<SilosDashboardHub>("/hub/silosdashboard");
    routes.MapHub<AuxiliaryEquipmentDashboardHub>("/hub/auxiliaryequipmentdashboard");
    routes.MapHub<DetailOeeDashboardHub>("/hub/detailoeedashboard");
    routes.MapHub<CircleOeeDashboardHub>("/hub/circleoeedashboard");
    routes.MapHub<AssemblyDashboardHub>("/hub/assemblyDashboard");
    routes.MapHub<DetailAssemblyDashboardHub>("/hub/detailAssemblyDashboard");
    routes.MapHub<OeeGridDashboardHub>("/hub/oeegriddashboard");
    routes.MapHub<SilosEquipmentDashboardHub>("/hub/silosequipmentdashboard");
    routes.MapHub<LiveLabourDashboardHub>("/hub/livelabourdashboard");
    routes.MapHub<ActiveNotificationHub>("/hub/activenotification");
    routes.MapHub<KpiDashboardHub>("/hub/kpidashboard");
    routes.MapHub<LineEfficiencyDashboardHub>("/hub/lineEfficiencyDashboard");
    routes.MapHub<FactoryEfficiencyDashboardHub>("/hub/factoryEfficiencyDashboard");
    routes.MapHub<LineDetailsOeeDashboardHub>("/hub/lineDetailsOeeDashboard");
    routes.MapHub<OeeEquipmentDashboardHub>("/hub/oeeequipmentdashboard");
    routes.MapHub<EnergyDashboardHub>("/hub/energydashboard");
});
#endregion

try
{
    app.Run();
}
catch (Exception ex)
{
    Log.Logger.Error(ex.ToString());
}